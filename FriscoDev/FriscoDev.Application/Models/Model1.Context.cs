//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FriscoDev.Application.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PMGDATABASEEntities : DbContext
    {
        public PMGDATABASEEntities()
            : base("name=PMGDATABASEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Connections> Connections { get; set; }
        public virtual DbSet<CUSTOMER> CUSTOMER { get; set; }
        public virtual DbSet<FactoryDefaultPages> FactoryDefaultPages { get; set; }
        public virtual DbSet<Firmware> Firmware { get; set; }
        public virtual DbSet<PMD> PMD { get; set; }
        public virtual DbSet<PMGConfiguration> PMGConfiguration { get; set; }
        public virtual DbSet<ScheduleOperations> ScheduleOperations { get; set; }
        public virtual DbSet<SiteConfig> SiteConfig { get; set; }
        public virtual DbSet<TimeZoneInfo> TimeZoneInfo { get; set; }
        public virtual DbSet<ConfigurationLog> ConfigurationLog { get; set; }
        public virtual DbSet<DeviceLocation> DeviceLocation { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<Pages> Pages { get; set; }
        public virtual DbSet<StatsLog> StatsLog { get; set; }
        public virtual DbSet<UserLoginInfo> UserLoginInfo { get; set; }
    
        public virtual int AddConfigurationEntry(Nullable<int> pMGId, Nullable<int> paramID, string value, Nullable<byte> state)
        {
            var pMGIdParameter = pMGId.HasValue ?
                new ObjectParameter("PMGId", pMGId) :
                new ObjectParameter("PMGId", typeof(int));
    
            var paramIDParameter = paramID.HasValue ?
                new ObjectParameter("ParamID", paramID) :
                new ObjectParameter("ParamID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddConfigurationEntry", pMGIdParameter, paramIDParameter, valueParameter, stateParameter);
        }
    
        public virtual int AddMessage(Nullable<int> p1, Nullable<byte> p2, Nullable<System.DateTime> p3, string p4, Nullable<byte> p5)
        {
            var p1Parameter = p1.HasValue ?
                new ObjectParameter("P1", p1) :
                new ObjectParameter("P1", typeof(int));
    
            var p2Parameter = p2.HasValue ?
                new ObjectParameter("P2", p2) :
                new ObjectParameter("P2", typeof(byte));
    
            var p3Parameter = p3.HasValue ?
                new ObjectParameter("P3", p3) :
                new ObjectParameter("P3", typeof(System.DateTime));
    
            var p4Parameter = p4 != null ?
                new ObjectParameter("P4", p4) :
                new ObjectParameter("P4", typeof(string));
    
            var p5Parameter = p5.HasValue ?
                new ObjectParameter("P5", p5) :
                new ObjectParameter("P5", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMessage", p1Parameter, p2Parameter, p3Parameter, p4Parameter, p5Parameter);
        }
    
        public virtual int AddPage(string pageName, Nullable<byte> displayType, Nullable<byte> pageType, string content, Nullable<int> hash, string username, Nullable<byte> overwrite)
        {
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var displayTypeParameter = displayType.HasValue ?
                new ObjectParameter("DisplayType", displayType) :
                new ObjectParameter("DisplayType", typeof(byte));
    
            var pageTypeParameter = pageType.HasValue ?
                new ObjectParameter("PageType", pageType) :
                new ObjectParameter("PageType", typeof(byte));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var hashParameter = hash.HasValue ?
                new ObjectParameter("Hash", hash) :
                new ObjectParameter("Hash", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var overwriteParameter = overwrite.HasValue ?
                new ObjectParameter("Overwrite", overwrite) :
                new ObjectParameter("Overwrite", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPage", pageNameParameter, displayTypeParameter, pageTypeParameter, contentParameter, hashParameter, usernameParameter, overwriteParameter);
        }
    
        public virtual int AddStatsLog(Nullable<short> p1, Nullable<System.DateTime> p2, string p3, Nullable<decimal> p4, Nullable<decimal> p5, Nullable<decimal> p6, Nullable<byte> p7, string p8, Nullable<short> p9, Nullable<short> p10, Nullable<int> p11)
        {
            var p1Parameter = p1.HasValue ?
                new ObjectParameter("P1", p1) :
                new ObjectParameter("P1", typeof(short));
    
            var p2Parameter = p2.HasValue ?
                new ObjectParameter("P2", p2) :
                new ObjectParameter("P2", typeof(System.DateTime));
    
            var p3Parameter = p3 != null ?
                new ObjectParameter("P3", p3) :
                new ObjectParameter("P3", typeof(string));
    
            var p4Parameter = p4.HasValue ?
                new ObjectParameter("P4", p4) :
                new ObjectParameter("P4", typeof(decimal));
    
            var p5Parameter = p5.HasValue ?
                new ObjectParameter("P5", p5) :
                new ObjectParameter("P5", typeof(decimal));
    
            var p6Parameter = p6.HasValue ?
                new ObjectParameter("P6", p6) :
                new ObjectParameter("P6", typeof(decimal));
    
            var p7Parameter = p7.HasValue ?
                new ObjectParameter("P7", p7) :
                new ObjectParameter("P7", typeof(byte));
    
            var p8Parameter = p8 != null ?
                new ObjectParameter("P8", p8) :
                new ObjectParameter("P8", typeof(string));
    
            var p9Parameter = p9.HasValue ?
                new ObjectParameter("P9", p9) :
                new ObjectParameter("P9", typeof(short));
    
            var p10Parameter = p10.HasValue ?
                new ObjectParameter("P10", p10) :
                new ObjectParameter("P10", typeof(short));
    
            var p11Parameter = p11.HasValue ?
                new ObjectParameter("P11", p11) :
                new ObjectParameter("P11", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStatsLog", p1Parameter, p2Parameter, p3Parameter, p4Parameter, p5Parameter, p6Parameter, p7Parameter, p8Parameter, p9Parameter, p10Parameter, p11Parameter);
        }
    
        public virtual ObjectResult<GetConfigurationEntries_Result> GetConfigurationEntries(Nullable<int> pmgID, Nullable<byte> state)
        {
            var pmgIDParameter = pmgID.HasValue ?
                new ObjectParameter("pmgID", pmgID) :
                new ObjectParameter("pmgID", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConfigurationEntries_Result>("GetConfigurationEntries", pmgIDParameter, stateParameter);
        }
    
        public virtual ObjectResult<GetPMG_Result> GetPMG(Nullable<int> pmdId)
        {
            var pmdIdParameter = pmdId.HasValue ?
                new ObjectParameter("pmdId", pmdId) :
                new ObjectParameter("pmdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPMG_Result>("GetPMG", pmdIdParameter);
        }
    
        public virtual ObjectResult<GetPMGForUser_Result> GetPMGForUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPMGForUser_Result>("GetPMGForUser", usernameParameter);
        }
    
        public virtual int PMGAdd(string pMGName, string iMSI, string username, Nullable<bool> statsCollection, Nullable<int> pMDID, string firmwareVersion, string location, string address, Nullable<int> deviceType)
        {
            var pMGNameParameter = pMGName != null ?
                new ObjectParameter("PMGName", pMGName) :
                new ObjectParameter("PMGName", typeof(string));
    
            var iMSIParameter = iMSI != null ?
                new ObjectParameter("IMSI", iMSI) :
                new ObjectParameter("IMSI", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var statsCollectionParameter = statsCollection.HasValue ?
                new ObjectParameter("StatsCollection", statsCollection) :
                new ObjectParameter("StatsCollection", typeof(bool));
    
            var pMDIDParameter = pMDID.HasValue ?
                new ObjectParameter("PMDID", pMDID) :
                new ObjectParameter("PMDID", typeof(int));
    
            var firmwareVersionParameter = firmwareVersion != null ?
                new ObjectParameter("FirmwareVersion", firmwareVersion) :
                new ObjectParameter("FirmwareVersion", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var deviceTypeParameter = deviceType.HasValue ?
                new ObjectParameter("DeviceType", deviceType) :
                new ObjectParameter("DeviceType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PMGAdd", pMGNameParameter, iMSIParameter, usernameParameter, statsCollectionParameter, pMDIDParameter, firmwareVersionParameter, locationParameter, addressParameter, deviceTypeParameter);
        }
    
        public virtual int PMGRemove(Nullable<int> pmdId)
        {
            var pmdIdParameter = pmdId.HasValue ?
                new ObjectParameter("pmdId", pmdId) :
                new ObjectParameter("pmdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PMGRemove", pmdIdParameter);
        }
    
        public virtual int PMGResetAllConnection(Nullable<bool> connection)
        {
            var connectionParameter = connection.HasValue ?
                new ObjectParameter("Connection", connection) :
                new ObjectParameter("Connection", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PMGResetAllConnection", connectionParameter);
        }
    
        public virtual int PMGUpdateConnection(Nullable<int> pmdId, Nullable<bool> connection, Nullable<bool> statsCollection, Nullable<int> keepAliveMessageInterval)
        {
            var pmdIdParameter = pmdId.HasValue ?
                new ObjectParameter("pmdId", pmdId) :
                new ObjectParameter("pmdId", typeof(int));
    
            var connectionParameter = connection.HasValue ?
                new ObjectParameter("Connection", connection) :
                new ObjectParameter("Connection", typeof(bool));
    
            var statsCollectionParameter = statsCollection.HasValue ?
                new ObjectParameter("StatsCollection", statsCollection) :
                new ObjectParameter("StatsCollection", typeof(bool));
    
            var keepAliveMessageIntervalParameter = keepAliveMessageInterval.HasValue ?
                new ObjectParameter("KeepAliveMessageInterval", keepAliveMessageInterval) :
                new ObjectParameter("KeepAliveMessageInterval", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PMGUpdateConnection", pmdIdParameter, connectionParameter, statsCollectionParameter, keepAliveMessageIntervalParameter);
        }
    
        public virtual int RemoveConfigurationEntries(Nullable<int> pmdId, Nullable<byte> state)
        {
            var pmdIdParameter = pmdId.HasValue ?
                new ObjectParameter("pmdId", pmdId) :
                new ObjectParameter("pmdId", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveConfigurationEntries", pmdIdParameter, stateParameter);
        }
    
        public virtual int RemovePage(string pageName, string username)
        {
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemovePage", pageNameParameter, usernameParameter);
        }
    
        public virtual int RemovePages(Nullable<int> pmgId)
        {
            var pmgIdParameter = pmgId.HasValue ?
                new ObjectParameter("pmgId", pmgId) :
                new ObjectParameter("pmgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemovePages", pmgIdParameter);
        }
    
        public virtual int UpdateCurrentPMGConfiguration(Nullable<int> pMGId, byte[] configuration, Nullable<int> hash, string updateTime)
        {
            var pMGIdParameter = pMGId.HasValue ?
                new ObjectParameter("PMGId", pMGId) :
                new ObjectParameter("PMGId", typeof(int));
    
            var configurationParameter = configuration != null ?
                new ObjectParameter("Configuration", configuration) :
                new ObjectParameter("Configuration", typeof(byte[]));
    
            var hashParameter = hash.HasValue ?
                new ObjectParameter("Hash", hash) :
                new ObjectParameter("Hash", typeof(int));
    
            var updateTimeParameter = updateTime != null ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCurrentPMGConfiguration", pMGIdParameter, configurationParameter, hashParameter, updateTimeParameter);
        }
    }
}
